
Feel free to use under the MIT Open Source License.

Sontaksla, May 2023-(in progress)

Some info about the directories:
    cli/ - command-line interface for the compiler.
    Core/ - the Core of the compiler.
    example/ - example of the FluxCp code.
    LLEM/ - Low Level Executable Machine
    lib/ - System library for FluxCp.
    test/ - xUnit tests

FluxCp is a strongly-typed, compilable and functional programming language. (doesn't support OOP)
FluxCp supports multithreading, pointers, importing and exporting other FluxCp projects.

To actually build a FluxCp project you must have .NET 6+ SDK installed on your computer.

Project structure:
    rootdir
        options.json (compiler options)
        file.fcp (FluxCp file)
        outputdir
            output.binary (contains low-level generated bytecode, which is natively translated by the LLEM)


Some info about the file:
    ``` - is a code literal, means that the code is demonstrated between those


Below is some info about syntax:

For the project to run, you must implement "main function" entry point. Main function syntax:
    ```
    void Main() 
    {

    }
    ```

## some comment ## - ignored by the compiler

primitive types:
void

integers:
    u8 (alias 'byte'), i16, u16, i32, u32, i64, u64
floating-point numbers (IEEE 754):
    f32, f64
characters:
    ch (char), str (string)

Supports creating structs.
    ```
    struct MyStruct 
    {
        i32 Field1;
        i64[] Field2;
        MyStruct Child;

        str SomeFunction(ch* arr, i32 length, i32 position) 
        {
            str outputString; ## string value will be on the stack ##
            for(i32 i = position; i < length; arr++) 
            {
                outputString.add(*arr);
            }
            return outputString;
        }
    }
    ```
